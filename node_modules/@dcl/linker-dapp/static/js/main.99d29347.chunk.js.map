{"version":3,"sources":["config.ts","modules/land/actions.ts","modules/land/reducer.ts","modules/signature/actions.ts","modules/signature/reducer.ts","modules/authorization/actions.ts","modules/authorization/reducer.ts","reducer.ts","contracts.ts","modules/land/utils.ts","modules/land/sagas.ts","modules/wallet/sagas.ts","modules/server/utils.ts","modules/signature/sagas.ts","modules/authorization/sagas.ts","modules/land/selectors.ts","modules/signature/selectors.ts","modules/authorization/selectors.ts","components/Error.tsx","components/LinkerPage/LinkerPage.tsx","components/LinkerPage/index.ts","components/LinkerPage/LinkerPage.container.tsx","index.tsx","store.ts","sagas.ts"],"names":["config","parseCoords","query","map","c","split","x","y","parseInt","init","searchParams","URLSearchParams","window","location","search","baseParcel","get","parcels","getAll","rootCID","debug","estateRegistry","landRegistry","chainId","ethereum","ChainId","ETHEREUM_MAINNET","ETHEREUM_ROPSTEN","setConfig","isRopsten","isDevelopment","getConfig","key","FETCH_LAND_REQUEST","FETCH_LAND_SUCCESS","FETCH_LAND_FAILURE","fetchLandSuccess","land","action","INITIAL_STATE","data","loading","error","SIGN_CONTENT_REQUEST","SIGN_CONTENT_SUCCESS","SIGN_CONTENT_FAILURE","signContentFailure","FETCH_AUTHORIZATIONS_REQUEST","FETCH_AUTHORIZATIONS_SUCCESS","FETCH_AUTHORIZATIONS_FAILURE","fetchAuthorizationsSuccess","authorizations","rootReducer","combineReducers","wallet","transaction","state","type","loadingReducer","payload","signature","authorization","contractInstances","getLandContract","a","getConnectedProvider","provider","address","Contract","LANDRegistry","Web3Provider","getSigner","getEstateContract","estate","EstateRegistry","coordsToString","landSaga","handleFetchLandRequest","handleConnectWalletSuccess","takeEvery","CONNECT_WALLET_SUCCESS","call","decodeLandData","version","name","description","put","message","coords","charAt","CSV","cellDelimiter","ipns","Error","walletSaga","fullWalletSaga","handleWallet","baseWalletSaga","createWalletSaga","CHAIN_ID","all","CHANGE_NETWORK","CHANGE_ACCOUNT","reload","closeServer","ok","fetch","JSON","stringify","signatureSaga","handleSignContentRequest","handleSignContentSuccess","takeLatest","dataToSign","toUtf8Bytes","web3provider","signer","getAddress","addr","send","hexlify","toLowerCase","signedMessage","select","getChainId","authorizationSaga","handleFetchAuthorizationsRequest","assetIds","Map","pAuthorizations","parcel","pAuthorization","Promise","resolve","reject","then","assetId","isUpdateAuthorized","set","catch","push","f","parcelAuthorizations","notAllowedAuthorizations","filter","allowedAuthorizations","pEstateAuthorizations","estateAuthorizations","owner","getState","getData","createSelector","isLoading","length","getError","every","React","memo","children","style","color","LinkScenePage","handleSignature","e","preventDefault","onSignContent","props","base","this","join","isConnected","isConnecting","onConnectWallet","Fragment","scale","seed","tooltip","strong","value","getFormattedUnauthorized","primary","onClick","disabled","isLandLoading","getLANDname","isAuthorizationLoading","signed","className","renderWalletData","maxWidth","maxHeight","width","src","alt","renderLANDinfo","PureComponent","LinkerPage","connect","getLand","getWallet","getLandError","getSignature","getAuthorizations","dispatch","enableWalletRequest","ProviderType","INJECTED","cid","signContentRequest","ReactDOM","render","store","initConfig","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStorageMiddleware","storageKey","storageMiddleware","loadStorageMiddleware","sagasMiddleware","createSagasMiddleware","transactionMiddleware","createTransactionMiddleware","loggerMiddleware","createLogger","collapsed","predicate","_","_action","enhancer","applyMiddleware","createStore","run","initStore","document","getElementById"],"mappings":"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","file":"static/js/main.99d29347.chunk.js","sourcesContent":["import { ChainId } from '@dcl/schemas'\n\nimport { Coords } from './modules/land/types'\n\ntype Config = {\n  baseParcel: Coords\n  parcels: Coords[]\n  rootCID: string\n  debug: boolean\n  estateRegistry?: string\n  landRegistry?: string\n  chainId: ChainId\n}\n\nlet config: Config | undefined\n\nfunction parseCoords(query: string | string[] | null): Coords[] {\n  if (!query) return [{ x: 0, y: 0 }]\n  const coords = typeof query === 'string' ? [query] : query\n  return coords.map(c => {\n    const [x, y] = c.split(',')\n    return { x: parseInt(x, 10), y: parseInt(y, 10) }\n  })\n}\n\ntype UrlFinder = {\n  get: (key: keyof Config) => string | null\n  getAll: (key: keyof Config) => string[] | null\n}\n\nfunction setConfig() {\n  const searchParams = new URLSearchParams(window.location.search) as UrlFinder\n  config = {\n    baseParcel: parseCoords(searchParams.get('baseParcel'))[0],\n    parcels: parseCoords(searchParams.getAll('parcels')),\n    rootCID:\n      searchParams.get('rootCID') ||\n      'QmPjpPyibbryTCi75zzcdeuPUBcujtEqj43shwKBAdMojy',\n    debug: searchParams.get('debug') === 'true',\n    estateRegistry: searchParams.get('estateRegistry') as string,\n    landRegistry: searchParams.get('landRegistry') as string,\n    chainId:\n      (window?.ethereum as any)?.chainId === '0x1'\n        ? ChainId.ETHEREUM_MAINNET\n        : ChainId.ETHEREUM_ROPSTEN\n  }\n}\n\nexport function init() {\n  setConfig()\n}\n\nexport function isRopsten() {\n  return (window?.ethereum as any)?.chainId !== '0x1'\n}\n\nexport function isDevelopment(): boolean {\n  return !!config?.debug\n}\n\nexport function getConfig<T extends keyof Config>(key: T) {\n  return (config as Config)[key]\n}\n","import { action } from 'typesafe-actions'\nimport { LANDMeta, Coords } from './types'\n\nexport const FETCH_LAND_REQUEST = '[Request] Fetch LAND'\nexport const FETCH_LAND_SUCCESS = '[Success] Fetch LAND'\nexport const FETCH_LAND_FAILURE = '[Failure] Fetch LAND'\n\nexport const fetchLandRequest = (coords: Coords) =>\n  action(FETCH_LAND_REQUEST, coords)\nexport const fetchLandSuccess = (land: LANDMeta) =>\n  action(FETCH_LAND_SUCCESS, { land })\nexport const fetchLandFailure = (error: string) =>\n  action(FETCH_LAND_FAILURE, { error })\n\nexport type FetchLandRequestAction = ReturnType<typeof fetchLandRequest>\nexport type FetchLandSuccessAction = ReturnType<typeof fetchLandSuccess>\nexport type FetchLandFailureAction = ReturnType<typeof fetchLandFailure>\n","import {\n  loadingReducer,\n  LoadingState\n} from 'decentraland-dapps/dist/modules/loading/reducer'\n\nimport {\n  FetchLandRequestAction,\n  FetchLandSuccessAction,\n  FetchLandFailureAction,\n  FETCH_LAND_REQUEST,\n  FETCH_LAND_FAILURE,\n  FETCH_LAND_SUCCESS\n} from './actions'\n\nexport type LandState = {\n  data: any\n  loading: LoadingState\n  error: string | null\n}\n\nconst INITIAL_STATE: LandState = {\n  data: {},\n  loading: [],\n  error: null\n}\n\nexport type LandReducerAction =\n  | FetchLandRequestAction\n  | FetchLandSuccessAction\n  | FetchLandFailureAction\n\nexport const landReducer = (\n  state = INITIAL_STATE,\n  action: LandReducerAction\n): LandState => {\n  switch (action.type) {\n    case FETCH_LAND_REQUEST:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action)\n      }\n    case FETCH_LAND_SUCCESS:\n      return {\n        loading: loadingReducer(state.loading, action),\n        data: action.payload.land,\n        error: null\n      }\n    case FETCH_LAND_FAILURE:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n        error: action.payload.error\n      }\n    default: {\n      return state\n    }\n  }\n}\n","import { action } from 'typesafe-actions'\n\nexport const SIGN_CONTENT_REQUEST = '[Request] Sign Content'\nexport const SIGN_CONTENT_SUCCESS = '[Success] Sign Content'\nexport const SIGN_CONTENT_FAILURE = '[Failure] Sign Content'\n\nexport const signContentRequest = (cid: string) =>\n  action(SIGN_CONTENT_REQUEST, cid)\nexport const signContentSuccess = (signature: string) =>\n  action(SIGN_CONTENT_SUCCESS, { signature })\nexport const signContentFailure = (error: string) =>\n  action(SIGN_CONTENT_FAILURE, { error })\n\nexport type SignContentRequestAction = ReturnType<typeof signContentRequest>\nexport type SignContentSuccessAction = ReturnType<typeof signContentSuccess>\nexport type SignContentFailureAction = ReturnType<typeof signContentFailure>\n","import {\n  loadingReducer,\n  LoadingState\n} from 'decentraland-dapps/dist/modules/loading/reducer'\n\nimport {\n  SignContentRequestAction,\n  SignContentSuccessAction,\n  SignContentFailureAction,\n  SIGN_CONTENT_REQUEST,\n  SIGN_CONTENT_SUCCESS,\n  SIGN_CONTENT_FAILURE\n} from './actions'\n\nexport type SignatureState = {\n  data: any\n  loading: LoadingState\n  error: string | null\n}\n\nconst INITIAL_STATE: SignatureState = {\n  data: '',\n  loading: [],\n  error: null\n}\n\nexport type SignatureReducerAction =\n  | SignContentRequestAction\n  | SignContentSuccessAction\n  | SignContentFailureAction\n\nexport const signatureReducer = (\n  state = INITIAL_STATE,\n  action: SignatureReducerAction\n): SignatureState => {\n  switch (action.type) {\n    case SIGN_CONTENT_REQUEST:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action)\n      }\n    case SIGN_CONTENT_SUCCESS:\n      return {\n        loading: loadingReducer(state.loading, action),\n        data: action.payload.signature,\n        error: null\n      }\n    case SIGN_CONTENT_FAILURE:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n        error: action.payload.error\n      }\n    default: {\n      return state\n    }\n  }\n}\n","import { action } from 'typesafe-actions'\nimport { Authorization } from './types'\n\nexport const FETCH_AUTHORIZATIONS_REQUEST =\n  '[Request] Fetch LAND Authorizations'\nexport const FETCH_AUTHORIZATIONS_SUCCESS =\n  '[Success] Fetch LAND Authorizations'\nexport const FETCH_AUTHORIZATIONS_FAILURE =\n  '[Failure] Fetch LAND Authorizations'\n\nexport const fetchAuthorizationsRequest = (owner: string) =>\n  action(FETCH_AUTHORIZATIONS_REQUEST, { owner })\n\nexport const fetchAuthorizationsSuccess = (authorizations: Authorization[]) =>\n  action(FETCH_AUTHORIZATIONS_SUCCESS, { authorizations })\n\nexport const fetchAuthorizationsFailure = (error: string) =>\n  action(FETCH_AUTHORIZATIONS_FAILURE, { error })\n\nexport type FetchAuthorizationsRequestAction = ReturnType<\n  typeof fetchAuthorizationsRequest\n>\nexport type FetchAuthorizationsSuccessAction = ReturnType<\n  typeof fetchAuthorizationsSuccess\n>\nexport type FetchAuthorizationsFailureAction = ReturnType<\n  typeof fetchAuthorizationsFailure\n>\n","import {\n  loadingReducer,\n  LoadingState\n} from 'decentraland-dapps/dist/modules/loading/reducer'\n\nimport {\n  FetchAuthorizationsRequestAction,\n  FetchAuthorizationsSuccessAction,\n  FetchAuthorizationsFailureAction,\n  FETCH_AUTHORIZATIONS_REQUEST,\n  FETCH_AUTHORIZATIONS_SUCCESS,\n  FETCH_AUTHORIZATIONS_FAILURE\n} from './actions'\n\nexport type AuthorizationState = {\n  data: any\n  loading: LoadingState\n  error: string | null\n}\n\nconst INITIAL_STATE: AuthorizationState = {\n  data: [],\n  loading: [],\n  error: null\n}\n\nexport type AuthorizationReducerAction =\n  | FetchAuthorizationsRequestAction\n  | FetchAuthorizationsSuccessAction\n  | FetchAuthorizationsFailureAction\n\nexport const authorizationReducer = (\n  state = INITIAL_STATE,\n  action: AuthorizationReducerAction\n): AuthorizationState => {\n  switch (action.type) {\n    case FETCH_AUTHORIZATIONS_REQUEST:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action)\n      }\n    case FETCH_AUTHORIZATIONS_SUCCESS:\n      return {\n        loading: loadingReducer(state.loading, action),\n        data: action.payload.authorizations,\n        error: null\n      }\n    case FETCH_AUTHORIZATIONS_FAILURE:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n        error: action.payload.error\n      }\n    default: {\n      return state\n    }\n  }\n}\n","import { combineReducers } from 'redux'\nimport { walletReducer as wallet } from 'decentraland-dapps/dist/modules/wallet/reducer'\nimport { transactionReducer as transaction } from 'decentraland-dapps/dist/modules/transaction/reducer'\n\nimport { landReducer as land } from './modules/land/reducer'\nimport { signatureReducer as signature } from './modules/signature/reducer'\nimport { authorizationReducer as authorization } from './modules/authorization/reducer'\nimport { RootState } from './types'\n\nexport const rootReducer = combineReducers<RootState>({\n  wallet,\n  transaction,\n  land,\n  signature,\n  authorization\n})\n","import { Contract } from '@ethersproject/contracts'\nimport { getConnectedProvider } from 'decentraland-dapps/dist/lib/eth'\nimport { Web3Provider } from '@ethersproject/providers'\n\nimport * as EstateRegistry from './abis/EstateRegistry.json'\nimport * as LANDRegistry from './abis/LANDRegistry.json'\nimport { getConfig, isRopsten } from './config'\n\nconst contractInstances: {\n  land?: Contract\n  estate?: Contract\n} = {}\n\n\nexport async function getLandContract() {\n  if (!contractInstances.land) {\n    const provider = await getConnectedProvider()\n    if (provider) {\n      const landRegistry = getConfig('landRegistry')\n      const address =\n        landRegistry ||\n        (isRopsten()\n          ? '0x7a73483784ab79257bb11b96fd62a2c3ae4fb75b'\n          : '0xf87e31492faf9a91b02ee0deaad50d51d56d5d4d')\n      contractInstances.land = new Contract(\n        address,\n        LANDRegistry.abi,\n        new Web3Provider(provider).getSigner()\n      )\n    }\n  }\n\n  return contractInstances.land\n}\n\nexport async function getEstateContract() {\n  if (!contractInstances.estate) {\n    const provider = await getConnectedProvider()\n    if (provider) {\n      const estateRegistry = getConfig('landRegistry')\n      const address =\n        estateRegistry ||\n        (isRopsten()\n          ? '0x124bf28a423b2ca80b3846c3aa0eb944fe7ebb95'\n          : '0x959e104e1a4db6317fa58f8295f586e1a978c297')\n      contractInstances.estate = new Contract(\n        address,\n        EstateRegistry.abi,\n        new Web3Provider(provider).getSigner()\n      )\n    }\n  }\n\n  return contractInstances.estate\n}\n","import { LANDMeta, Coords } from './types'\n\nexport function getEmptyLandData(): LANDMeta {\n  return {\n    version: 0,\n    name: '',\n    description: ''\n  }\n}\n\nexport function coordsToString({ x, y }: Coords): string {\n  return `${x},${y}`\n}\n","import { call, put, takeEvery } from 'redux-saga/effects'\nimport { CONNECT_WALLET_SUCCESS } from 'decentraland-dapps/dist/modules/wallet/actions'\nimport * as CSV from 'comma-separated-values'\n\nimport { getConfig } from '../../config'\nimport { getLandContract } from '../../contracts'\nimport {\n  FETCH_LAND_REQUEST,\n  FetchLandRequestAction,\n  fetchLandSuccess,\n  fetchLandFailure,\n  fetchLandRequest\n} from './actions'\nimport { getEmptyLandData } from './utils'\nimport { Contract } from '@ethersproject/contracts'\nimport { LANDMeta } from './types'\n\nexport function* landSaga() {\n  yield takeEvery(FETCH_LAND_REQUEST, handleFetchLandRequest)\n  yield takeEvery(CONNECT_WALLET_SUCCESS, handleConnectWalletSuccess)\n}\n\nfunction* handleFetchLandRequest(action: FetchLandRequestAction) {\n  const LANDRegistry: Contract = yield call(() => getLandContract())\n  try {\n    const { x, y } = action.payload\n    const data: string = yield call(() => LANDRegistry['landData'](x, y))\n    const land: LANDMeta = data\n      ? yield call(() => decodeLandData(data))\n      : getEmptyLandData()\n    yield put(fetchLandSuccess(land))\n  } catch (error) {\n    yield put(fetchLandFailure((error as Error).message))\n  }\n}\n\nfunction* handleConnectWalletSuccess() {\n  yield put(fetchLandRequest(getConfig('baseParcel')))\n}\n\nfunction decodeLandData(data = '') {\n  const version = data.charAt(0)\n  switch (version) {\n    case '0': {\n      const [version, name, description, ipns] = CSV.parse(data, {\n        cellDelimiter: ','\n      })[0]\n\n      return {\n        version,\n        // when a value is blank, csv.parse returns 0, so we fallback to empty string\n        // to support stuff like `0,,,ipns:link`\n        name: name || '',\n        description: description || '',\n        ipns: ipns || ''\n      }\n    }\n    default:\n      throw new Error(\n        `Unknown version when trying to decode land data: \"${data}\"`\n      )\n  }\n}\n","import { takeEvery, all, call } from 'redux-saga/effects'\nimport { createWalletSaga } from 'decentraland-dapps/dist/modules/wallet/sagas'\nimport {\n  CHANGE_NETWORK,\n  CHANGE_ACCOUNT,\n} from 'decentraland-dapps/dist/modules/wallet/actions'\n\nimport { getConfig } from '../../config'\n\nexport function* walletSaga() {\n  const baseWalletSaga = createWalletSaga({\n    CHAIN_ID: getConfig('chainId')\n  })\n  yield all([baseWalletSaga(), fullWalletSaga()])\n}\n\nfunction* fullWalletSaga() {\n  yield takeEvery(CHANGE_NETWORK, handleWallet)\n  yield takeEvery(CHANGE_ACCOUNT, handleWallet)\n}\n\nfunction* handleWallet() {\n  yield call(() => window.location.reload())\n}\n","import { ChainId } from '@dcl/schemas'\n\nexport type LinkerResponse = {\n  address: string\n  signature: string\n  chainId: ChainId\n}\n\nexport async function closeServer(\n  ok: boolean,\n  message: LinkerResponse\n): Promise<void> {\n  await fetch(`/api/close?ok=${ok}&reason=${JSON.stringify(message)}`)\n}\n","import { call, put, takeLatest, takeEvery, select } from 'redux-saga/effects'\nimport { getConnectedProvider } from 'decentraland-dapps/dist/lib/eth'\nimport {\n  getAddress,\n  getChainId,\n} from 'decentraland-dapps/dist/modules/wallet/selectors'\nimport { Web3Provider } from '@ethersproject/providers'\nimport { toUtf8Bytes } from '@ethersproject/strings'\nimport { ChainId } from '@dcl/schemas'\nimport { hexlify } from '@ethersproject/bytes'\n\nimport { closeServer } from '../server/utils'\nimport {\n  SIGN_CONTENT_REQUEST,\n  SIGN_CONTENT_SUCCESS,\n  SignContentRequestAction,\n  signContentSuccess,\n  signContentFailure,\n  SignContentSuccessAction\n} from './actions'\nimport { Provider } from 'decentraland-connect/dist'\n\nexport function* signatureSaga() {\n  yield takeLatest(SIGN_CONTENT_REQUEST, handleSignContentRequest)\n  yield takeEvery(SIGN_CONTENT_SUCCESS, handleSignContentSuccess)\n}\n\nfunction* handleSignContentRequest(action: SignContentRequestAction) {\n  try {\n    const dataToSign = toUtf8Bytes(action.payload)\n\n    const provider: Provider = yield call(() => getConnectedProvider())\n    const web3provider = new Web3Provider(provider)\n    const signer = web3provider.getSigner()\n\n    const addr: string = yield call(() => signer.getAddress())\n\n    const signedMessage: string = yield call(() =>\n      provider.send('personal_sign', [hexlify(dataToSign), addr.toLowerCase()])\n    )\n    yield put(signContentSuccess(signedMessage))\n  } catch (error) {\n    yield put(signContentFailure((error as Error).message))\n  }\n}\n\nfunction* handleSignContentSuccess(action: SignContentSuccessAction) {\n  const address: string = yield select(getAddress)\n  const chainId: ChainId = yield select(getChainId)\n  const { signature } = action.payload\n\n  try {\n    yield call(() => {\n      // tslint:disable-next-line: no-floating-promises\n      closeServer(true, { signature, address, chainId })\n    })\n  } catch (error) {\n    yield put(signContentFailure((error as Error).message))\n  }\n}\n","import { call, put, takeEvery, select } from 'redux-saga/effects'\nimport { CONNECT_WALLET_SUCCESS } from 'decentraland-dapps/dist/modules/wallet/actions'\nimport { getAddress } from 'decentraland-dapps/dist/modules/wallet/selectors'\n\nimport { getLandContract, getEstateContract } from '../../contracts'\nimport { getConfig } from '../../config'\nimport { coordsToString } from '../land/utils'\nimport {\n  FETCH_AUTHORIZATIONS_REQUEST,\n  fetchAuthorizationsRequest,\n  fetchAuthorizationsFailure,\n  fetchAuthorizationsSuccess\n} from './actions'\nimport { Authorization } from './types'\nimport { Contract } from '@ethersproject/contracts'\n\nexport function* authorizationSaga() {\n  yield takeEvery(CONNECT_WALLET_SUCCESS, handleConnectWalletSuccess)\n  yield takeEvery(\n    FETCH_AUTHORIZATIONS_REQUEST,\n    handleFetchAuthorizationsRequest\n  )\n}\n\nfunction* handleFetchAuthorizationsRequest() {\n  const LANDRegistry: Contract = yield call(() => getLandContract())\n  const EstateRegistry: Contract = yield call(() => getEstateContract())\n\n  try {\n    const address: string = yield select(getAddress)\n    const assetIds = new Map<string, string>()\n\n    const pAuthorizations: Promise<unknown>[] = []\n    for (const parcel of getConfig('parcels')) {\n      const { x, y } = parcel\n      const pAuthorization = new Promise((resolve, reject) => {\n        LANDRegistry['encodeTokenId'](x, y)\n          .then((assetId: any) => {\n            LANDRegistry['isUpdateAuthorized'](address, assetId)\n              .then((isUpdateAuthorized: any) => {\n                assetIds.set(coordsToString(parcel), assetId)\n                resolve({ x, y, isUpdateAuthorized })\n              })\n              .catch(reject)\n          })\n          .catch(reject)\n      })\n      pAuthorizations.push(pAuthorization)\n    }\n\n    const parcelAuthorizations: Authorization[] = yield call(() =>\n      Promise.all(pAuthorizations)\n    )\n\n    // If not authorized check permissions on estate\n    const notAllowedAuthorizations = parcelAuthorizations.filter(\n      a => !a.isUpdateAuthorized\n    )\n    const allowedAuthorizations = parcelAuthorizations.filter(\n      a => a.isUpdateAuthorized\n    )\n\n    const pEstateAuthorizations: unknown[] = []\n    for (const a of notAllowedAuthorizations) {\n      const assetId = assetIds.get(coordsToString(a))\n      const pAuthorization = new Promise((resolve, reject) => {\n        EstateRegistry['getLandEstateId'](assetId)\n          .then((estate: any) => {\n            if (estate && estate > 0) {\n              return EstateRegistry['isUpdateAuthorized'](address, estate).then(\n                (isUpdateAuthorized: any) => {\n                  resolve({ ...a, isUpdateAuthorized })\n                }\n              )\n            } else {\n              return resolve(a) // If no estate leave authorization in false\n            }\n          })\n          .catch(reject)\n      })\n      pEstateAuthorizations.push(pAuthorization)\n    }\n\n    const estateAuthorizations: Authorization[] = yield call(() =>\n      Promise.all(pEstateAuthorizations)\n    )\n\n    const authorizations = [...allowedAuthorizations, ...estateAuthorizations]\n    yield put(fetchAuthorizationsSuccess(authorizations))\n  } catch (error) {\n    yield put(fetchAuthorizationsFailure((error as Error).message))\n  }\n}\n\nfunction* handleConnectWalletSuccess(): any {\n  const address = yield call(() => getAddress)\n  yield put(fetchAuthorizationsRequest(address))\n}\n","import { createSelector } from 'reselect'\n\nimport { RootState } from '../../types'\n\nexport const getState = (state: RootState) => state.land\n\nexport const getData = createSelector(getState, state => state.data)\n\nexport const isLoading = createSelector(\n  getState,\n  state => state.loading.length > 0\n)\n\nexport const getError = createSelector(getState, state => state.error)\n","import { createSelector } from 'reselect'\nimport { RootState } from '../../types'\n\nexport const getState = (state: RootState) => state.signature\nexport const getData = createSelector(getState, state => state.data)\nexport const isLoading = createSelector(\n  getState,\n  state => state.loading.length > 0\n)\nexport const getError = createSelector(getState, state => state.error)\n","import { createSelector } from 'reselect'\n\nimport { RootState } from '../../types'\nimport { Authorization } from './types'\n\nexport const getState = (state: RootState) => state.authorization\n\nexport const getData = createSelector(getState, state => state.data)\n\nexport const isLoading = createSelector(\n  getState,\n  state => state.loading.length > 0\n)\n\nexport const getError = createSelector(getState, state => state.error)\n\nexport const isUpdateAuthorized = createSelector(getData, authorizations => {\n  if (!authorizations?.length) {\n    return\n  }\n\n  return authorizations.every((a: Authorization) => a.isUpdateAuthorized)\n})\n","import React from 'react'\n\nexport default React.memo(({ children }: { children: string }) => (\n  <p style={{ color: 'var(--primary)' }}> Error: {children}</p>\n))\n","import React from 'react'\nimport { Address, Blockie, Header, Button, Navbar } from 'decentraland-ui'\n// import Navbar from 'decentraland-dapps/dist/containers/Navbar'\nimport { ChainId } from '@dcl/schemas'\n\nimport { getConfig, isDevelopment } from '../../config'\nimport { coordsToString } from '../../modules/land/utils'\nimport Error from '../Error'\nimport { Props } from './types'\n\nexport default class LinkScenePage extends React.PureComponent<Props> {\n  handleSignature = (e: any) => {\n    e.preventDefault()\n    const { onSignContent } = this.props\n    onSignContent(getConfig('rootCID'))\n  }\n\n  getLANDname() {\n    const { base } = this.props\n    return base.name ? `\"${base.name}\"` : `LAND without name`\n  }\n\n  getFormattedUnauthorized() {\n    const { authorizations } = this.props\n    return authorizations\n      .filter(a => !a.isUpdateAuthorized)\n      .map(a => `\"${coordsToString(a)}\"`)\n      .join(', ')\n  }\n\n  renderWalletData() {\n    const {\n      isConnected,\n      wallet,\n      authorizations,\n      isUpdateAuthorized,\n      isConnecting,\n      onConnectWallet\n    } = this.props\n    if (isConnected && wallet.address) {\n      return (\n        <React.Fragment>\n          <p>\n            Using address: &nbsp;\n            <Blockie scale={3} seed={wallet.address}>\n              <Address tooltip strong value={wallet.address} />\n            </Blockie>\n          </p>\n          {authorizations.length && !isUpdateAuthorized ? (\n            <Error>\n              {`You don't have permissions to update The following LANDs that are part of the scene: ${this.getFormattedUnauthorized()}`}\n            </Error>\n          ) : null}\n        </React.Fragment>\n      )\n    }\n\n    return (\n      <React.Fragment>\n        {isConnecting ? null : <p>Could not find any wallet</p>}\n        <p>\n          <Button\n            primary\n            onClick={onConnectWallet}\n            loading={isConnecting}\n            disabled={isConnecting}\n          >\n            Reconnect&nbsp;\n          </Button>\n        </p>\n      </React.Fragment>\n    )\n  }\n\n  renderLANDinfo() {\n    const { error, isLandLoading, isConnected } = this.props\n    const { x, y } = getConfig('baseParcel')\n\n    if (error || !isConnected || isLandLoading) {\n      return\n    }\n\n    return (\n      <p>\n        Updating <b>{this.getLANDname()}</b> at coordinates{' '}\n        <b>\n          {x}, {y}\n        </b>\n      </p>\n    )\n  }\n\n  render() {\n    const {\n      error,\n      isConnected,\n      isUpdateAuthorized,\n      isAuthorizationLoading,\n      signed,\n      wallet\n    } = this.props\n    const { x, y } = getConfig('baseParcel')\n    const rootCID = getConfig('rootCID')\n    const isRopsten = wallet?.chainId === ChainId.ETHEREUM_ROPSTEN\n\n    return (\n      <div className=\"LinkScenePage\">\n        <Navbar />\n        <Header>Update LAND data</Header>\n        {this.renderWalletData()}\n        <div>\n          <img\n            style={{ maxWidth: '100%', maxHeight: '100%', width: '45%' }}\n            className=\"map\"\n            src={`https://api.decentraland.${\n              isRopsten ? 'zone' : 'org'\n            }/v1/parcels/${x}/${y}/map.png`}\n            alt={`Base parcel ${x},${y}`}\n          />\n        </div>\n        {this.renderLANDinfo()}\n        <p>\n          Project CID: <b>{rootCID}</b>\n        </p>\n        <form>\n          <div>\n            <Button\n              primary\n              onClick={this.handleSignature}\n              disabled={\n                !isConnected ||\n                !!error ||\n                isAuthorizationLoading ||\n                !isUpdateAuthorized\n              }\n            >\n              Sign and Deploy\n            </Button>\n          </div>\n        </form>\n        {isConnected && signed && (\n          <p>\n            Content was succesfully signed and it's being uploaded. You can\n            close this page and check the CLI for more info.\n          </p>\n        )}\n        {error ? (\n          isDevelopment() ? (\n            <Error>{error}</Error>\n          ) : (\n            <Error>There was an unexpected error.</Error>\n          )\n        ) : null}\n        <style>{`\n          .LinkScenePage {\n            text-align: center;\n          }\n          .map {\n            padding: 15px;\n          }\n          .options div input {\n            color: white;\n          }\n        `}</style>\n        {isRopsten ? (\n          <style>{`\n            body:before {\n              content: 'Using Ropsten test network';\n              background: var(--primary);\n              color: white;\n              text-align: center;\n              text-transform: uppercase;\n              height: 24px;\n              width: 100%;\n              position: fixed;\n              padding-top: 2px;\n            }\n            .LinkScenePage {\n              padding-top: 24px;\n            }\n          `}</style>\n        ) : null}\n      </div>\n    )\n  }\n}\n","import LinkerPage from './LinkerPage.container'\nexport default LinkerPage\n","import { AnyAction, Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport { ProviderType } from 'decentraland-connect'\nimport { enableWalletRequest } from 'decentraland-dapps/dist/modules/wallet/actions'\nimport {\n  getData as getWallet,\n  isConnected,\n  isConnecting\n} from 'decentraland-dapps/dist/modules/wallet/selectors'\n\nimport {\n  isLoading as isLandLoading,\n  getData as getLand,\n  getError as getLandError\n} from '../../modules/land/selectors'\nimport { getData as getSignature } from '../../modules/signature/selectors'\nimport {\n  getData as getAuthorizations,\n  isUpdateAuthorized,\n  isLoading as isAuthorizationLoading\n} from '../../modules/authorization/selectors'\nimport { signContentRequest } from '../../modules/signature/actions'\nimport { RootState } from '../../types'\nimport { MapStateProps, MapDispatchProps } from './types'\n\nimport LinkerPage from './LinkerPage'\n\nconst mapState = (state: RootState): MapStateProps => {\n  return {\n    base: getLand(state),\n    wallet: getWallet(state)!,\n    isLandLoading: isLandLoading(state),\n    isConnected: isConnected(state),\n    isConnecting: isConnecting(state),\n    error: getLandError(state)!,\n    signed: !!getSignature(state),\n    isUpdateAuthorized: isUpdateAuthorized(state),\n    authorizations: getAuthorizations(state),\n    isAuthorizationLoading: isAuthorizationLoading(state)\n  }\n}\n\nconst mapDispatch = (dispatch: Dispatch<AnyAction>): MapDispatchProps => ({\n  onConnectWallet: () => dispatch(enableWalletRequest(ProviderType.INJECTED)),\n  onSignContent: (cid: string) => dispatch(signContentRequest(cid))\n})\n\nexport default connect(mapState, mapDispatch)(LinkerPage)\n","import ReactDOM from 'react-dom'\nimport WalletProvider from 'decentraland-dapps/dist/providers/WalletProvider'\nimport { Provider } from 'react-redux'\n\nimport { initStore } from './store'\nimport LinkerPage from './components/LinkerPage'\n\nimport 'decentraland-ui/lib/styles.css'\nimport 'decentraland-ui/lib/dark-theme.css'\n\n// tslint:disable-next-line: no-floating-promises\nReactDOM.render(\n  <Provider store={initStore()}>\n    <WalletProvider>\n      <LinkerPage />\n    </WalletProvider>\n  </Provider>,\n  document.getElementById('root')\n)\n","import { applyMiddleware, compose, createStore } from 'redux'\nimport createSagasMiddleware from 'redux-saga'\nimport { createLogger } from 'redux-logger'\nimport { createTransactionMiddleware } from 'decentraland-dapps/dist/modules/transaction/middleware'\nimport { createStorageMiddleware } from 'decentraland-dapps/dist/modules/storage/middleware'\n\nimport { init as initConfig } from './config'\nimport { rootReducer } from './reducer'\nimport { rootSaga } from './sagas'\n\nexport function initStore() {\n  initConfig()\n  const composeEnhancers =\n    (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\n  const { storageMiddleware, loadStorageMiddleware } = createStorageMiddleware({\n    storageKey: 'decentraland-linker'\n  })\n  const sagasMiddleware = createSagasMiddleware()\n  const transactionMiddleware = createTransactionMiddleware()\n  const loggerMiddleware = createLogger({\n    collapsed: () => true,\n    predicate: (_, _action) => false // isDevelopment() || action.type.includes('Failure')\n  })\n\n  const middleware = applyMiddleware(\n    sagasMiddleware,\n    loggerMiddleware,\n    storageMiddleware,\n    transactionMiddleware\n  )\n\n  const enhancer = composeEnhancers(middleware)\n  const store = createStore(rootReducer, enhancer)\n\n  sagasMiddleware.run(rootSaga())\n  loadStorageMiddleware(store)\n\n  return store\n}\n","import { all } from 'redux-saga/effects'\n\nimport { landSaga } from './modules/land/sagas'\nimport { walletSaga } from './modules/wallet/sagas'\nimport { signatureSaga } from './modules/signature/sagas'\nimport { authorizationSaga } from './modules/authorization/sagas'\n\nexport function rootSaga() {\n  return function*() {\n    yield all([walletSaga(), landSaga(), signatureSaga(), authorizationSaga()])\n  }\n}\n"],"sourceRoot":""}