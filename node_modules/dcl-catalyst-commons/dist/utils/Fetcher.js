"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.queryGraph = exports.postForm = exports.fetchPipe = exports.fetchBuffer = exports.fetchJson = exports.Fetcher = void 0;
const ms_1 = __importDefault(require("ms"));
const abort_controller_1 = __importDefault(require("abort-controller"));
const timers_1 = require("timers");
const Helper_1 = require("./Helper");
const blob_to_buffer_1 = __importDefault(require("blob-to-buffer"));
const cross_fetch_1 = __importDefault(require("cross-fetch"));
const FetcherConfiguration_1 = require("./FetcherConfiguration");
class Fetcher {
    constructor(customDefaults) {
        this.customDefaults = customDefaults !== null && customDefaults !== void 0 ? customDefaults : {};
    }
    fetchJson(url, options) {
        return fetchJson(url, Helper_1.mergeRequestOptions(this.customDefaults, options));
    }
    fetchBuffer(url, options) {
        return fetchBuffer(url, Helper_1.mergeRequestOptions(this.customDefaults, options));
    }
    /**
     * Fetches the url and pipes the response obtained from the upstream to the `writeTo` Stream and
     *  returns the headers from the upstream request.
     * @param url to request
     * @param writeTo the stream to pipe the response to
     * @param options config for the request
     */
    fetchPipe(url, writeTo, options) {
        return fetchPipe(url, writeTo, Helper_1.mergeRequestOptions(this.customDefaults, options));
    }
    postForm(url, options) {
        return postForm(url, Helper_1.mergeRequestOptions(this.customDefaults, options));
    }
    queryGraph(url, query, variables, options) {
        return queryGraph(url, query, variables, Helper_1.mergeRequestOptions(this.customDefaults, options));
    }
}
exports.Fetcher = Fetcher;
async function fetchJson(url, options) {
    return fetchInternal(url, response => response.json(), Helper_1.mergeRequestOptions(FetcherConfiguration_1.FETCH_JSON_DEFAULTS, options));
}
exports.fetchJson = fetchJson;
async function fetchBuffer(url, options) {
    return fetchInternal(url, response => extractBuffer(response), Helper_1.mergeRequestOptions(FetcherConfiguration_1.FETCH_BUFFER_DEFAULTS, options));
}
exports.fetchBuffer = fetchBuffer;
/**
 * Fetches the url and pipes the response obtained from the upstream to the `writeTo` Stream and
 *  returns the headers from the upstream request.
 * @param url to request
 * @param writeTo the stream to pipe the response to
 * @param options config for the request
 */
async function fetchPipe(url, writeTo, options) {
    return fetchInternal(url, response => copyResponse(response, writeTo), Helper_1.mergeRequestOptions(FetcherConfiguration_1.FETCH_BUFFER_DEFAULTS, options));
}
exports.fetchPipe = fetchPipe;
async function copyResponse(response, writeTo) {
    // The method pipeTo() is not working, so we need to use pipe() which is the one implemented
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    response.body.pipe(writeTo);
    return response.headers;
}
async function postForm(url, options) {
    return fetchInternal(url, response => response.json(), Helper_1.mergeRequestOptions(FetcherConfiguration_1.POST_DEFAULTS, options));
}
exports.postForm = postForm;
async function queryGraph(url, query, variables, options) {
    const response = await postForm(url, Object.assign({ body: JSON.stringify({ query, variables }), headers: { 'Content-Type': 'application/json' } }, options));
    if (response.errors) {
        throw new Error(`Error querying graph. Reasons: ${JSON.stringify(response.errors)}`);
    }
    return response.data;
}
exports.queryGraph = queryGraph;
async function fetchInternal(url, responseConsumer, options) {
    return Helper_1.retry(async () => {
        const controller = new abort_controller_1.default();
        const timeout = timers_1.setTimeout(() => {
            controller.abort();
        }, ms_1.default(options.timeout));
        try {
            const response = await cross_fetch_1.default(url, {
                signal: controller.signal,
                body: options.body,
                method: options.method,
                headers: options.headers
            });
            if (response.ok) {
                return await responseConsumer(response);
            }
            else {
                const responseText = await response.text();
                throw new Error(`Failed to fetch ${url}. Got status ${response.status}. Response was '${responseText}'`);
            }
        }
        finally {
            timers_1.clearTimeout(timeout);
        }
    }, options.attempts, options.waitTime);
}
async function extractBuffer(response) {
    if ('buffer' in response) {
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        return response.buffer();
    }
    const blob = await response.blob();
    return asyncBlobToBuffer(blob);
}
function asyncBlobToBuffer(blob) {
    return new Promise((resolve, reject) => {
        blob_to_buffer_1.default(blob, (err, buffer) => {
            if (err)
                reject(err);
            resolve(buffer);
        });
    });
}
//# sourceMappingURL=Fetcher.js.map