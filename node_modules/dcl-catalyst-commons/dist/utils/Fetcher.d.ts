/// <reference types="node" />
import { RequestOptions } from './FetcherConfiguration';
export declare class Fetcher {
    private readonly customDefaults;
    constructor(customDefaults?: Omit<RequestOptions, 'body'>);
    fetchJson(url: string, options?: RequestOptions): Promise<any>;
    fetchBuffer(url: string, options?: RequestOptions): Promise<Buffer>;
    /**
     * Fetches the url and pipes the response obtained from the upstream to the `writeTo` Stream and
     *  returns the headers from the upstream request.
     * @param url to request
     * @param writeTo the stream to pipe the response to
     * @param options config for the request
     */
    fetchPipe(url: string, writeTo: ReadableStream<Uint8Array>, options?: RequestOptions): Promise<Headers>;
    postForm(url: string, options?: RequestOptions): Promise<any>;
    queryGraph<T = any>(url: string, query: string, variables: Record<string, any>, options?: RequestOptions): Promise<T>;
}
export declare function fetchJson(url: string, options?: RequestOptions): Promise<any>;
export declare function fetchBuffer(url: string, options?: RequestOptions): Promise<Buffer>;
/**
 * Fetches the url and pipes the response obtained from the upstream to the `writeTo` Stream and
 *  returns the headers from the upstream request.
 * @param url to request
 * @param writeTo the stream to pipe the response to
 * @param options config for the request
 */
export declare function fetchPipe(url: string, writeTo: ReadableStream<Uint8Array>, options?: RequestOptions): Promise<Headers>;
export declare function postForm(url: string, options?: RequestOptions): Promise<any>;
export declare function queryGraph<T = any>(url: string, query: string, variables: Record<string, any>, options?: RequestOptions): Promise<T>;
