"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeRequestOptions = exports.applySomeDefaults = exports.applyDefaults = exports.retry = exports.delay = void 0;
const ms_1 = __importDefault(require("ms"));
function delay(time) {
    return new Promise((resolve) => setTimeout(resolve, ms_1.default(time)));
}
exports.delay = delay;
async function retry(execution, attempts, waitTime = '1s', failedAttemptCallback, allFailedCallback) {
    while (attempts > 0) {
        try {
            return await execution();
        }
        catch (error) {
            attempts--;
            if (attempts > 0) {
                if (failedAttemptCallback) {
                    failedAttemptCallback(attempts);
                }
                await delay(waitTime);
            }
            else {
                if (allFailedCallback) {
                    allFailedCallback();
                }
                return Promise.reject(error);
            }
        }
    }
    return Promise.reject(new Error('Should never reach here'));
}
exports.retry = retry;
/** Add defaults to missing properties in the partial object */
function applyDefaults(defaults, partial) {
    return Object.assign(Object.assign({}, defaults), partial);
}
exports.applyDefaults = applyDefaults;
/** Add some defaults to missing properties in the partial object. This means that the object is not yet complete */
function applySomeDefaults(defaults, partial) {
    return Object.assign(Object.assign({}, defaults), partial);
}
exports.applySomeDefaults = applySomeDefaults;
/**  As headers field is Record<string, string> type, then when merging request Options
     it's needed to merge the array instead of just applying the defaults.           */
function mergeRequestOptions(target, source) {
    var _a;
    const combinedHeaders = Object.assign(Object.assign({}, (_a = target) === null || _a === void 0 ? void 0 : _a.headers), source === null || source === void 0 ? void 0 : source.headers);
    const combinedOptions = applyDefaults(target, source);
    return Object.assign(Object.assign({}, combinedOptions), { headers: combinedHeaders });
}
exports.mergeRequestOptions = mergeRequestOptions;
//# sourceMappingURL=Helper.js.map